[uwsgi]
# 参考 https://www.techatbloomberg.com/blog/configuring-uwsgi-production-deployment/
# ----------------------------------------------------
# 基础配置
# ----------------------------------------------------

# 开启 uwsgi 配置严格检查
strict = true
# 启动主进程，来管理其他进程，其它的uwsgi进程都是这个master进程的子进程，如果kill这个master进程，相当于重启所有的uwsgi进程
master = true
# 开启 python 线程
enable-threads = true
# 当服务器退出的时候自动删除unix socket文件和其他临时文件
vacuum = true
# 单解析器模式，默认为多解析器模式，但可能对部分的 C 扩展支持不好
# 这个参数待商榷，暂时建议开启
single-interpreter = true
# 接收 SIGTERM 信号时，不是重新加载堆栈，而是关闭应用
die-on-term = true
# 如果 uwsgi 加载的 app 异常，则组织 uwsgi 正常启动
need-app = true


# ----------------------------------------------------
# cheaper 子系统
# worker 动态扩缩容 hpa
# ----------------------------------------------------
# cheaper 算法
cheaper-algo = spare
# 最大 worker 数量
processes = 32
# 最小 worker 数量
cheaper = 8
# 初始化数量
cheaper-initial = 16
# 计算 worker 负载的时间间隔
cheaper-overload = 30
# 扩缩容步长
cheaper-step = 2


# ----------------------------------------------------
# worker 资源回收
# ----------------------------------------------------
# 处理 1000 个请求
max-requests = 1000
# 最大生命周期，单位秒
max-worker-lifetime = 3600
# 最大分配 2GB 内存，慎用
# reload-on-rss = 2048
# 杀掉 worker 前等待时间，单位秒
worker-reload-mercy = 60


# ----------------------------------------------------
# 应用层配置
# ----------------------------------------------------
# 对外监听 0.0.0.0:8000 端口
http = :8000
# 在app加载前切换到当前目录， 指定运行目录
chdir = /opt/app-root/src/
# 加载一个 WSGI 模块
module = {{cookiecutter.PROJECT_NAME}}.wsgi:application
# 静态资源路径，可用于简单代替 nginx
# django 前后端分离项目，可这样省去后端 nginx 配置
static-map = /static=/opt/app-root/src/statics